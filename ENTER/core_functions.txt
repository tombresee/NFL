
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



# reading and merging game data:
# low_memory=False

def readGames():
    # print('Reading raw games.csv file into dataframe...')
    # games.csv cols are:
    #   - unique gameId, gameDate, time, homeTeamAbbr, visitorTeamAbbr, week#
    games = pd.read_csv('/kaggle/input/nfl-big-data-bowl-2021/games.csv', index_col=0)
    return games

def readPlayers():
    # print('Reading raw players.csv file into dataframe...')
    # players.csv cols are:
    #   - nflId, height, weight, birthDate, college, position, and displayName
    # could utilize `usecols=[some-list-of-columns]` to get exact cols 
    players = pd.read_csv('/kaggle/input/nfl-big-data-bowl-2021/players.csv', index_col=0)
    return players

def readPlays():
    # print('Reading raw plays.csv file into dataframe...')
    # 27 independent columns of data:
    #  - gameId, playId, playDescription, quarter, down, yard2go, etc etc
    players = pd.read_csv('/kaggle/input/nfl-big-data-bowl-2021/plays.csv', index_col=0)
    return plays



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



def mergeGameData(df)
    df = pd.merge(df, games, how='left', left_on=['gameId'], right_on=['gameId'])
    # left or full merge ? 
    # then delete columns you think you need to 

def mergePlaysData(df)
    df = pd.merge(df, plays, how='left', left_on=['gameId'], right_on=['gameId'])
    # left or full merge ? 
    # then delete columns that you think you need to 
    # df = df.drop(['homeTeamAbbr','visitorTeamAbbr'], axis=1)
    # df = df.drop(['homeTeamAbbr','visitorTeamAbbr'], axis=1)
    # left_on=['gameId','playId'], right_on=['gameId','playId'])
    # df['OnOffense'] = np.where(df['PlayerTeam'] == df['possessionTeam'], True, False)
    # df = pd.merge(df, TargetedWR, how='left', left_on=['gameId','playId'], right_on=['gameId','playId'])
    # df = pd.merge(df, plays, how='left', left_on=['gameId', 'playId'], right_on=['gameId', 'playId'])




# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




def filterInfo():
    # example filtering queries ! 
	# Offense = df.query('OnOffense == 1').reset_index()
	# Defense = df.query('OnOffense == 0').reset_index()
	# Football = df.query('displayName == "Football"').reset_index()
	# NotNone = df.query('event != "None"')
	# NotNone = NotNone.groupby(['gameId','playId','event'])['frameId'].max().reset_index()
	# NotNone.columns = NotNone.columns.str.replace(' ' , '')
	# WeekData1['After_snap'] = np.where(WeekData1['frameId'] > WeekData1['ball_snap'],1,0)
	# WeekData1['After_PassArrived'] = np.where(WeekData1['frameId'] > WeekData1['pass_arrived'],1,0)
	# 



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



def rankingSomething():

	group = df.groupby(['week','gameId','possessionTeam','targetNflId','playId'])['offensePlayResult','epa_x','yac_epa','air_epa','air_yards','complete_pass','touchdown'].max().reset_index()

	group = group.groupby(['week','gameId','possessionTeam','targetNflId'])['offensePlayResult','epa_x','yac_epa','air_epa','air_yards','complete_pass','touchdown'].agg(['sum','count']).reset_index()

	# group.columns = group.columns.str.replace('sum' , '')

	# Cols = ['week', 'gameId','possessionTeam','targetNflId','offensePlayResult count','complete_pass ','touchdown ', 'offensePlayResult ', 'air_yards ']

	# group = group.drop_duplicates(subset=['week','gameId','targetNflId'])

	# .reset_index(0,drop=True)

	# 





# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




Events = ['ball_snap','play_action','run_pass_option','pass_forward','pass_arrived','None']





# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



def normalizingData():
    # W['ToLeft'] = W.playDirection == "left"
    # W['TeamOnOffense'] = "home"
    # W.loc[W.possessionTeam != W.PlayerTeam, 'TeamOnOffense'] = "away"
    # W['IsOnOffense'] = W.PlayerTeam == W.TeamOnOffense # Is player on offense?
    # W['MPH'] = W['s'] / 0.488889
    # LOS = WeekData1.query('displayName == "Football" & After_snap == 0')
    # LOS = LOS.groupby(['gameId','playId'])['X_std'].agg('median').reset_index()
    # df = Finaldf1[(Finaldf1['position'].isin(Pos)) & (Finaldf1['Contains_play_action'] == True) & (Finaldf1['event'].isin(Events)) & (Finaldf1['playType'] == "play_type_pass") ]
    # Group = Events.groupby(['nflId','displayName','position','Pos2'])['Bite'].agg(['count','sum','mean']).reset_index()
    # Cols = ['nflId', 'displayName', 'position', 'Pos2', 'count','sum','mean']
	# Group = Group[Cols]
	# Group = Group.query('PlayAction_snaps > 15', engine='python').sort_values(by=['BitePct'], ascending=False)#.head(10)
	# Group = Group.query('position != "S" & position != "DB"').sort_values(by=['BitePct'], ascending=False).reset_index()
	# 



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



cat_item = {'Offense': ['QB', 'RB', 'FB', 'WR', 'TE', 'HB'], 
            'Defense': ['OLB', 'MLB', 'LB', 'ILB', 'CB', 'DE', 'DT', 'NT', 'DB', 'S', 'SS', 'FS'], 
            'Special': ['K', 'P', 'LS']}

item_cat = {w: k for k, v in cat_item.items() for w in v}

df_players['team_role'] = df_players['position'].map(item_cat)

df_players.tail(5)



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



df_college = df_players.groupby(['collegeName', 'team_role'], as_index = False)[['nflId']].count()

barchart_college = px.bar(
data_frame = df_college,
x = 'collegeName',
y = 'nflId',
color = 'team_role',

